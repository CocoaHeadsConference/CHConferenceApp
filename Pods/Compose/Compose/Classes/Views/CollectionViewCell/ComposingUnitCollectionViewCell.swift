//
//  ComposingUnitCollectionViewCell.swift
//  Compose
//
//  Created by Bruno Bilescky on 05/10/16.
//  Copyright Â© 2016 VivaReal. All rights reserved.
//

import UIKit

/// Generic cell that encapsulates another view inside it. You can use it to fast embed other views inside a UICollectionViewCell.
public class ComposingUnitCollectionViewCell<V: UIView>: UICollectionViewCell {
    
    private var centerXConstraint: NSLayoutConstraint!
    private var centerYConstraint: NSLayoutConstraint!
    private var widthConstraint: NSLayoutConstraint!
    private var heightConstraint: NSLayoutConstraint!
    
    /// Embeded view (this view is generated by the CollectionViewCell)
    public private(set) var innerView: V!
    
    /// insets applied to the embeded view.
    public var insets: UIEdgeInsets = .zero
    
    override public init(frame: CGRect) {
        super.init(frame: frame)
        commonInit(frame: frame)
    }
    
    required public init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) not supported.")
    }
    
    private func commonInit(frame: CGRect) {
        self.isOpaque = false
        self.backgroundColor = .clear
        self.innerView = V(frame: frame)
        self.contentView.addSubview(innerView)
        self.innerView.translatesAutoresizingMaskIntoConstraints = false
        let toView = self
        guard let itemView = self.innerView else { return }
        centerXConstraint = NSLayoutConstraint(item: itemView, attribute: .centerX, relatedBy: .equal, toItem: toView, attribute: .centerX, multiplier: 1, constant: 0)
        centerYConstraint = NSLayoutConstraint(item: itemView, attribute: .centerY, relatedBy: .equal, toItem: toView, attribute: .centerY, multiplier: 1, constant: 0)
        widthConstraint = NSLayoutConstraint(item: itemView, attribute: .width, relatedBy: .equal, toItem: toView, attribute: .width, multiplier: 1, constant: 0)
        heightConstraint = NSLayoutConstraint(item: itemView, attribute: .height, relatedBy: .equal, toItem: toView, attribute: .height, multiplier: 1, constant: 0)
        toView.addConstraints([centerXConstraint, centerYConstraint, widthConstraint, heightConstraint])
    }
    
    /// You can apply some ViewTraits to the collectionViewCell, in order to configure it
    ///
    /// - parameter traits: an array of ViewTraits
    public func apply(traits: [ViewTraits]) {
        self.backgroundColor = .clear
        let result = ViewTraits.mapStyle(from: traits)
        self.insets = result.insets
        self.contentView.isOpaque = result.opaque
        self.contentView.backgroundColor = result.backgroundColor
    }
    
    /// update the insets of the inner view when moving to superview
    override public func didMoveToSuperview() {
        super.didMoveToSuperview()
        update(insets: insets)
    }
    
    /// Needed in order to update with animation the state of the cell
    ///
    /// - parameter layoutAttributes: layout attributes defined by the collectionView layout
    override public func apply(_ layoutAttributes: UICollectionViewLayoutAttributes) {
        UIView.animate(withDuration: 0.33) {
            self.update(insets: self.insets)
            self.layoutIfNeeded()
        }
    }
    
    private func update(insets: UIEdgeInsets, animated: Bool = false) {
        let closure = {
            self.widthConstraint.constant = insets.horizontalInsets * -1
            self.heightConstraint.constant = insets.verticalInsets * -1
        }
        if animated {
            UIView.animate(withDuration: 0.33, animations: closure)
        }
        else {
            closure()
        }
    }
    
}
